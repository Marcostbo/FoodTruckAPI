# Generated by Django 5.0 on 2023-12-06 19:18

from django.db import migrations, models
from datetime import datetime
import math
import pandas


def create_applicants(apps, schema_editor):
    food_truck_model = apps.get_model("foodtruck_api", "FoodTruck")
    applicant_model = apps.get_model("foodtruck_api", "Applicant")

    absolute_path = r'C:\Users\Marcos Oliveira\PycharmProjects\P1-django-take-home-assignment\food-truck-data.csv'
    data = pandas.read_csv(absolute_path)
    data = data.where(pandas.notna(data), None)

    datetime_format = '%m/%d/%Y %H:%M:%S %p'
    date_format = '%Y%M%d'

    for index, row in data.iterrows():
        create_data = {
            'location_id': row['locationid'],
            'applicant': applicant_model.objects.get(name=row['Applicant']),
            'facility_type': row['FacilityType'],
            'cnn': row['cnn'],
            'location_description': row['LocationDescription'],
            'address': row['Address'],
            'block': row['block'],
            'lot': row['lot'],
            'permit': row['permit'],
            'status': row['Status'],
            'food_items': row['FoodItems'],
            'latitude': row['Latitude'],
            'longitude': row['Longitude'],
            'schedule': row['Schedule'],
            'days_hours': row['dayshours'],
            'approved_on': datetime.strptime(str(row['Approved']), datetime_format) if row['Approved'] else None,
            'received_on': datetime.strptime(str(row['Received']), date_format).date() if row['Received'] else None,
            'pior_permission': row['PriorPermit'],
            'expiration_date': datetime.strptime(row['ExpirationDate'], datetime_format)
            if row['ExpirationDate'] else None,
            'fire_prevention_districts': row['Fire Prevention Districts']
            if not math.isnan(row['Fire Prevention Districts']) else None,
            'police_districts': row['Police Districts']
            if not math.isnan(row['Police Districts']) else None,
            'supervisor_districts': row['Supervisor Districts']
            if not math.isnan(row['Supervisor Districts']) else None,
            'zip_codes': row['Zip Codes'] if not math.isnan(row['Zip Codes']) else None,
            'neighborhoods': row['Neighborhoods (old)'] if not math.isnan(row['Neighborhoods (old)']) else None,
        }
        food_truck_model.objects.create(**create_data)


class Migration(migrations.Migration):
    dependencies = [
        ('foodtruck_api', '0002_fill_applicants_model'),
    ]

    operations = [
        migrations.RunPython(create_applicants),
    ]
